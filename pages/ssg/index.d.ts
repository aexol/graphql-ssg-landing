
// Return html string from this function fo ssg;
declare const render: <T>(fn:Function) => void;
declare const html: (strings: TemplateStringsArray, ...expr: string[]) => string
declare const css: (strings: TemplateStringsArray, ...expr: string[]) => string
declare const md: (strings: TemplateStringsArray, ...expr: string[]) => string

type ZEUS_INTERFACES = never
type ZEUS_UNIONS = never

export type ValueTypes = {
    ["Query"]: AliasType<{
jobs?: [{	input?:ValueTypes["JobsInput"]},ValueTypes["Job"]],
job?: [{	input:ValueTypes["JobInput"]},ValueTypes["Job"]],
locations?: [{	input:ValueTypes["LocationsInput"]},ValueTypes["Location"]],
city?: [{	input:ValueTypes["LocationInput"]},ValueTypes["City"]],
country?: [{	input:ValueTypes["LocationInput"]},ValueTypes["Country"]],
remote?: [{	input:ValueTypes["LocationInput"]},ValueTypes["Remote"]],
	commitments?:ValueTypes["Commitment"],
	cities?:ValueTypes["City"],
	countries?:ValueTypes["Country"],
	remotes?:ValueTypes["Remote"],
	companies?:ValueTypes["Company"],
		__typename?: true
}>;
	["JobsInput"]: {
	type?:string,
	slug?:string
};
	["Job"]: AliasType<{
	id?:true,
	title?:true,
	slug?:true,
	commitment?:ValueTypes["Commitment"],
cities?: [{	where?:ValueTypes["CityWhereInput"],	orderBy?:ValueTypes["CityOrderByInput"],	skip?:number,	after?:string,	before?:string,	first?:number,	last?:number},ValueTypes["City"]],
countries?: [{	where?:ValueTypes["CountryWhereInput"],	orderBy?:ValueTypes["CountryOrderByInput"],	skip?:number,	after?:string,	before?:string,	first?:number,	last?:number},ValueTypes["Country"]],
remotes?: [{	where?:ValueTypes["RemoteWhereInput"],	orderBy?:ValueTypes["RemoteOrderByInput"],	skip?:number,	after?:string,	before?:string,	first?:number,	last?:number},ValueTypes["Remote"]],
	description?:true,
	applyUrl?:true,
	company?:ValueTypes["Company"],
tags?: [{	where?:ValueTypes["TagWhereInput"],	orderBy?:ValueTypes["TagOrderByInput"],	skip?:number,	after?:string,	before?:string,	first?:number,	last?:number},ValueTypes["Tag"]],
	isPublished?:true,
	isFeatured?:true,
	locationNames?:true,
	userEmail?:true,
	postedAt?:true,
	createdAt?:true,
	updatedAt?:true,
		__typename?: true
}>;
	["Commitment"]: AliasType<{
	id?:true,
	title?:true,
	slug?:true,
jobs?: [{	where?:ValueTypes["JobWhereInput"],	orderBy?:ValueTypes["JobOrderByInput"],	skip?:number,	after?:string,	before?:string,	first?:number,	last?:number},ValueTypes["Job"]],
	createdAt?:true,
	updatedAt?:true,
		__typename?: true
}>;
	["JobWhereInput"]: {
	id?:string,
	id_not?:string,
	id_in?:string[],
	id_not_in?:string[],
	id_lt?:string,
	id_lte?:string,
	id_gt?:string,
	id_gte?:string,
	id_contains?:string,
	id_not_contains?:string,
	id_starts_with?:string,
	id_not_starts_with?:string,
	id_ends_with?:string,
	id_not_ends_with?:string,
	title?:string,
	title_not?:string,
	title_in?:string[],
	title_not_in?:string[],
	title_lt?:string,
	title_lte?:string,
	title_gt?:string,
	title_gte?:string,
	title_contains?:string,
	title_not_contains?:string,
	title_starts_with?:string,
	title_not_starts_with?:string,
	title_ends_with?:string,
	title_not_ends_with?:string,
	slug?:string,
	slug_not?:string,
	slug_in?:string[],
	slug_not_in?:string[],
	slug_lt?:string,
	slug_lte?:string,
	slug_gt?:string,
	slug_gte?:string,
	slug_contains?:string,
	slug_not_contains?:string,
	slug_starts_with?:string,
	slug_not_starts_with?:string,
	slug_ends_with?:string,
	slug_not_ends_with?:string,
	commitment?:ValueTypes["CommitmentWhereInput"],
	cities_every?:ValueTypes["CityWhereInput"],
	cities_some?:ValueTypes["CityWhereInput"],
	cities_none?:ValueTypes["CityWhereInput"],
	countries_every?:ValueTypes["CountryWhereInput"],
	countries_some?:ValueTypes["CountryWhereInput"],
	countries_none?:ValueTypes["CountryWhereInput"],
	remotes_every?:ValueTypes["RemoteWhereInput"],
	remotes_some?:ValueTypes["RemoteWhereInput"],
	remotes_none?:ValueTypes["RemoteWhereInput"],
	description?:string,
	description_not?:string,
	description_in?:string[],
	description_not_in?:string[],
	description_lt?:string,
	description_lte?:string,
	description_gt?:string,
	description_gte?:string,
	description_contains?:string,
	description_not_contains?:string,
	description_starts_with?:string,
	description_not_starts_with?:string,
	description_ends_with?:string,
	description_not_ends_with?:string,
	applyUrl?:string,
	applyUrl_not?:string,
	applyUrl_in?:string[],
	applyUrl_not_in?:string[],
	applyUrl_lt?:string,
	applyUrl_lte?:string,
	applyUrl_gt?:string,
	applyUrl_gte?:string,
	applyUrl_contains?:string,
	applyUrl_not_contains?:string,
	applyUrl_starts_with?:string,
	applyUrl_not_starts_with?:string,
	applyUrl_ends_with?:string,
	applyUrl_not_ends_with?:string,
	company?:ValueTypes["CompanyWhereInput"],
	tags_every?:ValueTypes["TagWhereInput"],
	tags_some?:ValueTypes["TagWhereInput"],
	tags_none?:ValueTypes["TagWhereInput"],
	isPublished?:boolean,
	isPublished_not?:boolean,
	isFeatured?:boolean,
	isFeatured_not?:boolean,
	locationNames?:string,
	locationNames_not?:string,
	locationNames_in?:string[],
	locationNames_not_in?:string[],
	locationNames_lt?:string,
	locationNames_lte?:string,
	locationNames_gt?:string,
	locationNames_gte?:string,
	locationNames_contains?:string,
	locationNames_not_contains?:string,
	locationNames_starts_with?:string,
	locationNames_not_starts_with?:string,
	locationNames_ends_with?:string,
	locationNames_not_ends_with?:string,
	userEmail?:string,
	userEmail_not?:string,
	userEmail_in?:string[],
	userEmail_not_in?:string[],
	userEmail_lt?:string,
	userEmail_lte?:string,
	userEmail_gt?:string,
	userEmail_gte?:string,
	userEmail_contains?:string,
	userEmail_not_contains?:string,
	userEmail_starts_with?:string,
	userEmail_not_starts_with?:string,
	userEmail_ends_with?:string,
	userEmail_not_ends_with?:string,
	postedAt?:ValueTypes["DateTime"],
	postedAt_not?:ValueTypes["DateTime"],
	postedAt_in?:ValueTypes["DateTime"][],
	postedAt_not_in?:ValueTypes["DateTime"][],
	postedAt_lt?:ValueTypes["DateTime"],
	postedAt_lte?:ValueTypes["DateTime"],
	postedAt_gt?:ValueTypes["DateTime"],
	postedAt_gte?:ValueTypes["DateTime"],
	createdAt?:ValueTypes["DateTime"],
	createdAt_not?:ValueTypes["DateTime"],
	createdAt_in?:ValueTypes["DateTime"][],
	createdAt_not_in?:ValueTypes["DateTime"][],
	createdAt_lt?:ValueTypes["DateTime"],
	createdAt_lte?:ValueTypes["DateTime"],
	createdAt_gt?:ValueTypes["DateTime"],
	createdAt_gte?:ValueTypes["DateTime"],
	updatedAt?:ValueTypes["DateTime"],
	updatedAt_not?:ValueTypes["DateTime"],
	updatedAt_in?:ValueTypes["DateTime"][],
	updatedAt_not_in?:ValueTypes["DateTime"][],
	updatedAt_lt?:ValueTypes["DateTime"],
	updatedAt_lte?:ValueTypes["DateTime"],
	updatedAt_gt?:ValueTypes["DateTime"],
	updatedAt_gte?:ValueTypes["DateTime"],
	AND?:ValueTypes["JobWhereInput"][],
	OR?:ValueTypes["JobWhereInput"][],
	NOT?:ValueTypes["JobWhereInput"][]
};
	["CommitmentWhereInput"]: {
	id?:string,
	id_not?:string,
	id_in?:string[],
	id_not_in?:string[],
	id_lt?:string,
	id_lte?:string,
	id_gt?:string,
	id_gte?:string,
	id_contains?:string,
	id_not_contains?:string,
	id_starts_with?:string,
	id_not_starts_with?:string,
	id_ends_with?:string,
	id_not_ends_with?:string,
	title?:string,
	title_not?:string,
	title_in?:string[],
	title_not_in?:string[],
	title_lt?:string,
	title_lte?:string,
	title_gt?:string,
	title_gte?:string,
	title_contains?:string,
	title_not_contains?:string,
	title_starts_with?:string,
	title_not_starts_with?:string,
	title_ends_with?:string,
	title_not_ends_with?:string,
	slug?:string,
	slug_not?:string,
	slug_in?:string[],
	slug_not_in?:string[],
	slug_lt?:string,
	slug_lte?:string,
	slug_gt?:string,
	slug_gte?:string,
	slug_contains?:string,
	slug_not_contains?:string,
	slug_starts_with?:string,
	slug_not_starts_with?:string,
	slug_ends_with?:string,
	slug_not_ends_with?:string,
	jobs_every?:ValueTypes["JobWhereInput"],
	jobs_some?:ValueTypes["JobWhereInput"],
	jobs_none?:ValueTypes["JobWhereInput"],
	createdAt?:ValueTypes["DateTime"],
	createdAt_not?:ValueTypes["DateTime"],
	createdAt_in?:ValueTypes["DateTime"][],
	createdAt_not_in?:ValueTypes["DateTime"][],
	createdAt_lt?:ValueTypes["DateTime"],
	createdAt_lte?:ValueTypes["DateTime"],
	createdAt_gt?:ValueTypes["DateTime"],
	createdAt_gte?:ValueTypes["DateTime"],
	updatedAt?:ValueTypes["DateTime"],
	updatedAt_not?:ValueTypes["DateTime"],
	updatedAt_in?:ValueTypes["DateTime"][],
	updatedAt_not_in?:ValueTypes["DateTime"][],
	updatedAt_lt?:ValueTypes["DateTime"],
	updatedAt_lte?:ValueTypes["DateTime"],
	updatedAt_gt?:ValueTypes["DateTime"],
	updatedAt_gte?:ValueTypes["DateTime"],
	AND?:ValueTypes["CommitmentWhereInput"][],
	OR?:ValueTypes["CommitmentWhereInput"][],
	NOT?:ValueTypes["CommitmentWhereInput"][]
};
	["DateTime"]:unknown;
	["CityWhereInput"]: {
	id?:string,
	id_not?:string,
	id_in?:string[],
	id_not_in?:string[],
	id_lt?:string,
	id_lte?:string,
	id_gt?:string,
	id_gte?:string,
	id_contains?:string,
	id_not_contains?:string,
	id_starts_with?:string,
	id_not_starts_with?:string,
	id_ends_with?:string,
	id_not_ends_with?:string,
	name?:string,
	name_not?:string,
	name_in?:string[],
	name_not_in?:string[],
	name_lt?:string,
	name_lte?:string,
	name_gt?:string,
	name_gte?:string,
	name_contains?:string,
	name_not_contains?:string,
	name_starts_with?:string,
	name_not_starts_with?:string,
	name_ends_with?:string,
	name_not_ends_with?:string,
	slug?:string,
	slug_not?:string,
	slug_in?:string[],
	slug_not_in?:string[],
	slug_lt?:string,
	slug_lte?:string,
	slug_gt?:string,
	slug_gte?:string,
	slug_contains?:string,
	slug_not_contains?:string,
	slug_starts_with?:string,
	slug_not_starts_with?:string,
	slug_ends_with?:string,
	slug_not_ends_with?:string,
	country?:ValueTypes["CountryWhereInput"],
	type?:string,
	type_not?:string,
	type_in?:string[],
	type_not_in?:string[],
	type_lt?:string,
	type_lte?:string,
	type_gt?:string,
	type_gte?:string,
	type_contains?:string,
	type_not_contains?:string,
	type_starts_with?:string,
	type_not_starts_with?:string,
	type_ends_with?:string,
	type_not_ends_with?:string,
	jobs_every?:ValueTypes["JobWhereInput"],
	jobs_some?:ValueTypes["JobWhereInput"],
	jobs_none?:ValueTypes["JobWhereInput"],
	createdAt?:ValueTypes["DateTime"],
	createdAt_not?:ValueTypes["DateTime"],
	createdAt_in?:ValueTypes["DateTime"][],
	createdAt_not_in?:ValueTypes["DateTime"][],
	createdAt_lt?:ValueTypes["DateTime"],
	createdAt_lte?:ValueTypes["DateTime"],
	createdAt_gt?:ValueTypes["DateTime"],
	createdAt_gte?:ValueTypes["DateTime"],
	updatedAt?:ValueTypes["DateTime"],
	updatedAt_not?:ValueTypes["DateTime"],
	updatedAt_in?:ValueTypes["DateTime"][],
	updatedAt_not_in?:ValueTypes["DateTime"][],
	updatedAt_lt?:ValueTypes["DateTime"],
	updatedAt_lte?:ValueTypes["DateTime"],
	updatedAt_gt?:ValueTypes["DateTime"],
	updatedAt_gte?:ValueTypes["DateTime"],
	AND?:ValueTypes["CityWhereInput"][],
	OR?:ValueTypes["CityWhereInput"][],
	NOT?:ValueTypes["CityWhereInput"][]
};
	["CountryWhereInput"]: {
	id?:string,
	id_not?:string,
	id_in?:string[],
	id_not_in?:string[],
	id_lt?:string,
	id_lte?:string,
	id_gt?:string,
	id_gte?:string,
	id_contains?:string,
	id_not_contains?:string,
	id_starts_with?:string,
	id_not_starts_with?:string,
	id_ends_with?:string,
	id_not_ends_with?:string,
	name?:string,
	name_not?:string,
	name_in?:string[],
	name_not_in?:string[],
	name_lt?:string,
	name_lte?:string,
	name_gt?:string,
	name_gte?:string,
	name_contains?:string,
	name_not_contains?:string,
	name_starts_with?:string,
	name_not_starts_with?:string,
	name_ends_with?:string,
	name_not_ends_with?:string,
	slug?:string,
	slug_not?:string,
	slug_in?:string[],
	slug_not_in?:string[],
	slug_lt?:string,
	slug_lte?:string,
	slug_gt?:string,
	slug_gte?:string,
	slug_contains?:string,
	slug_not_contains?:string,
	slug_starts_with?:string,
	slug_not_starts_with?:string,
	slug_ends_with?:string,
	slug_not_ends_with?:string,
	type?:string,
	type_not?:string,
	type_in?:string[],
	type_not_in?:string[],
	type_lt?:string,
	type_lte?:string,
	type_gt?:string,
	type_gte?:string,
	type_contains?:string,
	type_not_contains?:string,
	type_starts_with?:string,
	type_not_starts_with?:string,
	type_ends_with?:string,
	type_not_ends_with?:string,
	isoCode?:string,
	isoCode_not?:string,
	isoCode_in?:string[],
	isoCode_not_in?:string[],
	isoCode_lt?:string,
	isoCode_lte?:string,
	isoCode_gt?:string,
	isoCode_gte?:string,
	isoCode_contains?:string,
	isoCode_not_contains?:string,
	isoCode_starts_with?:string,
	isoCode_not_starts_with?:string,
	isoCode_ends_with?:string,
	isoCode_not_ends_with?:string,
	cities_every?:ValueTypes["CityWhereInput"],
	cities_some?:ValueTypes["CityWhereInput"],
	cities_none?:ValueTypes["CityWhereInput"],
	jobs_every?:ValueTypes["JobWhereInput"],
	jobs_some?:ValueTypes["JobWhereInput"],
	jobs_none?:ValueTypes["JobWhereInput"],
	createdAt?:ValueTypes["DateTime"],
	createdAt_not?:ValueTypes["DateTime"],
	createdAt_in?:ValueTypes["DateTime"][],
	createdAt_not_in?:ValueTypes["DateTime"][],
	createdAt_lt?:ValueTypes["DateTime"],
	createdAt_lte?:ValueTypes["DateTime"],
	createdAt_gt?:ValueTypes["DateTime"],
	createdAt_gte?:ValueTypes["DateTime"],
	updatedAt?:ValueTypes["DateTime"],
	updatedAt_not?:ValueTypes["DateTime"],
	updatedAt_in?:ValueTypes["DateTime"][],
	updatedAt_not_in?:ValueTypes["DateTime"][],
	updatedAt_lt?:ValueTypes["DateTime"],
	updatedAt_lte?:ValueTypes["DateTime"],
	updatedAt_gt?:ValueTypes["DateTime"],
	updatedAt_gte?:ValueTypes["DateTime"],
	AND?:ValueTypes["CountryWhereInput"][],
	OR?:ValueTypes["CountryWhereInput"][],
	NOT?:ValueTypes["CountryWhereInput"][]
};
	["RemoteWhereInput"]: {
	id?:string,
	id_not?:string,
	id_in?:string[],
	id_not_in?:string[],
	id_lt?:string,
	id_lte?:string,
	id_gt?:string,
	id_gte?:string,
	id_contains?:string,
	id_not_contains?:string,
	id_starts_with?:string,
	id_not_starts_with?:string,
	id_ends_with?:string,
	id_not_ends_with?:string,
	name?:string,
	name_not?:string,
	name_in?:string[],
	name_not_in?:string[],
	name_lt?:string,
	name_lte?:string,
	name_gt?:string,
	name_gte?:string,
	name_contains?:string,
	name_not_contains?:string,
	name_starts_with?:string,
	name_not_starts_with?:string,
	name_ends_with?:string,
	name_not_ends_with?:string,
	slug?:string,
	slug_not?:string,
	slug_in?:string[],
	slug_not_in?:string[],
	slug_lt?:string,
	slug_lte?:string,
	slug_gt?:string,
	slug_gte?:string,
	slug_contains?:string,
	slug_not_contains?:string,
	slug_starts_with?:string,
	slug_not_starts_with?:string,
	slug_ends_with?:string,
	slug_not_ends_with?:string,
	type?:string,
	type_not?:string,
	type_in?:string[],
	type_not_in?:string[],
	type_lt?:string,
	type_lte?:string,
	type_gt?:string,
	type_gte?:string,
	type_contains?:string,
	type_not_contains?:string,
	type_starts_with?:string,
	type_not_starts_with?:string,
	type_ends_with?:string,
	type_not_ends_with?:string,
	jobs_every?:ValueTypes["JobWhereInput"],
	jobs_some?:ValueTypes["JobWhereInput"],
	jobs_none?:ValueTypes["JobWhereInput"],
	createdAt?:ValueTypes["DateTime"],
	createdAt_not?:ValueTypes["DateTime"],
	createdAt_in?:ValueTypes["DateTime"][],
	createdAt_not_in?:ValueTypes["DateTime"][],
	createdAt_lt?:ValueTypes["DateTime"],
	createdAt_lte?:ValueTypes["DateTime"],
	createdAt_gt?:ValueTypes["DateTime"],
	createdAt_gte?:ValueTypes["DateTime"],
	updatedAt?:ValueTypes["DateTime"],
	updatedAt_not?:ValueTypes["DateTime"],
	updatedAt_in?:ValueTypes["DateTime"][],
	updatedAt_not_in?:ValueTypes["DateTime"][],
	updatedAt_lt?:ValueTypes["DateTime"],
	updatedAt_lte?:ValueTypes["DateTime"],
	updatedAt_gt?:ValueTypes["DateTime"],
	updatedAt_gte?:ValueTypes["DateTime"],
	AND?:ValueTypes["RemoteWhereInput"][],
	OR?:ValueTypes["RemoteWhereInput"][],
	NOT?:ValueTypes["RemoteWhereInput"][]
};
	["CompanyWhereInput"]: {
	id?:string,
	id_not?:string,
	id_in?:string[],
	id_not_in?:string[],
	id_lt?:string,
	id_lte?:string,
	id_gt?:string,
	id_gte?:string,
	id_contains?:string,
	id_not_contains?:string,
	id_starts_with?:string,
	id_not_starts_with?:string,
	id_ends_with?:string,
	id_not_ends_with?:string,
	name?:string,
	name_not?:string,
	name_in?:string[],
	name_not_in?:string[],
	name_lt?:string,
	name_lte?:string,
	name_gt?:string,
	name_gte?:string,
	name_contains?:string,
	name_not_contains?:string,
	name_starts_with?:string,
	name_not_starts_with?:string,
	name_ends_with?:string,
	name_not_ends_with?:string,
	slug?:string,
	slug_not?:string,
	slug_in?:string[],
	slug_not_in?:string[],
	slug_lt?:string,
	slug_lte?:string,
	slug_gt?:string,
	slug_gte?:string,
	slug_contains?:string,
	slug_not_contains?:string,
	slug_starts_with?:string,
	slug_not_starts_with?:string,
	slug_ends_with?:string,
	slug_not_ends_with?:string,
	websiteUrl?:string,
	websiteUrl_not?:string,
	websiteUrl_in?:string[],
	websiteUrl_not_in?:string[],
	websiteUrl_lt?:string,
	websiteUrl_lte?:string,
	websiteUrl_gt?:string,
	websiteUrl_gte?:string,
	websiteUrl_contains?:string,
	websiteUrl_not_contains?:string,
	websiteUrl_starts_with?:string,
	websiteUrl_not_starts_with?:string,
	websiteUrl_ends_with?:string,
	websiteUrl_not_ends_with?:string,
	logoUrl?:string,
	logoUrl_not?:string,
	logoUrl_in?:string[],
	logoUrl_not_in?:string[],
	logoUrl_lt?:string,
	logoUrl_lte?:string,
	logoUrl_gt?:string,
	logoUrl_gte?:string,
	logoUrl_contains?:string,
	logoUrl_not_contains?:string,
	logoUrl_starts_with?:string,
	logoUrl_not_starts_with?:string,
	logoUrl_ends_with?:string,
	logoUrl_not_ends_with?:string,
	jobs_every?:ValueTypes["JobWhereInput"],
	jobs_some?:ValueTypes["JobWhereInput"],
	jobs_none?:ValueTypes["JobWhereInput"],
	twitter?:string,
	twitter_not?:string,
	twitter_in?:string[],
	twitter_not_in?:string[],
	twitter_lt?:string,
	twitter_lte?:string,
	twitter_gt?:string,
	twitter_gte?:string,
	twitter_contains?:string,
	twitter_not_contains?:string,
	twitter_starts_with?:string,
	twitter_not_starts_with?:string,
	twitter_ends_with?:string,
	twitter_not_ends_with?:string,
	emailed?:boolean,
	emailed_not?:boolean,
	createdAt?:ValueTypes["DateTime"],
	createdAt_not?:ValueTypes["DateTime"],
	createdAt_in?:ValueTypes["DateTime"][],
	createdAt_not_in?:ValueTypes["DateTime"][],
	createdAt_lt?:ValueTypes["DateTime"],
	createdAt_lte?:ValueTypes["DateTime"],
	createdAt_gt?:ValueTypes["DateTime"],
	createdAt_gte?:ValueTypes["DateTime"],
	updatedAt?:ValueTypes["DateTime"],
	updatedAt_not?:ValueTypes["DateTime"],
	updatedAt_in?:ValueTypes["DateTime"][],
	updatedAt_not_in?:ValueTypes["DateTime"][],
	updatedAt_lt?:ValueTypes["DateTime"],
	updatedAt_lte?:ValueTypes["DateTime"],
	updatedAt_gt?:ValueTypes["DateTime"],
	updatedAt_gte?:ValueTypes["DateTime"],
	AND?:ValueTypes["CompanyWhereInput"][],
	OR?:ValueTypes["CompanyWhereInput"][],
	NOT?:ValueTypes["CompanyWhereInput"][]
};
	["TagWhereInput"]: {
	id?:string,
	id_not?:string,
	id_in?:string[],
	id_not_in?:string[],
	id_lt?:string,
	id_lte?:string,
	id_gt?:string,
	id_gte?:string,
	id_contains?:string,
	id_not_contains?:string,
	id_starts_with?:string,
	id_not_starts_with?:string,
	id_ends_with?:string,
	id_not_ends_with?:string,
	name?:string,
	name_not?:string,
	name_in?:string[],
	name_not_in?:string[],
	name_lt?:string,
	name_lte?:string,
	name_gt?:string,
	name_gte?:string,
	name_contains?:string,
	name_not_contains?:string,
	name_starts_with?:string,
	name_not_starts_with?:string,
	name_ends_with?:string,
	name_not_ends_with?:string,
	slug?:string,
	slug_not?:string,
	slug_in?:string[],
	slug_not_in?:string[],
	slug_lt?:string,
	slug_lte?:string,
	slug_gt?:string,
	slug_gte?:string,
	slug_contains?:string,
	slug_not_contains?:string,
	slug_starts_with?:string,
	slug_not_starts_with?:string,
	slug_ends_with?:string,
	slug_not_ends_with?:string,
	jobs_every?:ValueTypes["JobWhereInput"],
	jobs_some?:ValueTypes["JobWhereInput"],
	jobs_none?:ValueTypes["JobWhereInput"],
	createdAt?:ValueTypes["DateTime"],
	createdAt_not?:ValueTypes["DateTime"],
	createdAt_in?:ValueTypes["DateTime"][],
	createdAt_not_in?:ValueTypes["DateTime"][],
	createdAt_lt?:ValueTypes["DateTime"],
	createdAt_lte?:ValueTypes["DateTime"],
	createdAt_gt?:ValueTypes["DateTime"],
	createdAt_gte?:ValueTypes["DateTime"],
	updatedAt?:ValueTypes["DateTime"],
	updatedAt_not?:ValueTypes["DateTime"],
	updatedAt_in?:ValueTypes["DateTime"][],
	updatedAt_not_in?:ValueTypes["DateTime"][],
	updatedAt_lt?:ValueTypes["DateTime"],
	updatedAt_lte?:ValueTypes["DateTime"],
	updatedAt_gt?:ValueTypes["DateTime"],
	updatedAt_gte?:ValueTypes["DateTime"],
	AND?:ValueTypes["TagWhereInput"][],
	OR?:ValueTypes["TagWhereInput"][],
	NOT?:ValueTypes["TagWhereInput"][]
};
	["JobOrderByInput"]:JobOrderByInput;
	["CityOrderByInput"]:CityOrderByInput;
	["City"]: AliasType<{
	id?:true,
	name?:true,
	slug?:true,
	country?:ValueTypes["Country"],
	type?:true,
jobs?: [{	where?:ValueTypes["JobWhereInput"],	orderBy?:ValueTypes["JobOrderByInput"],	skip?:number,	after?:string,	before?:string,	first?:number,	last?:number},ValueTypes["Job"]],
	createdAt?:true,
	updatedAt?:true,
		__typename?: true
}>;
	["Country"]: AliasType<{
	id?:true,
	name?:true,
	slug?:true,
	type?:true,
	isoCode?:true,
cities?: [{	where?:ValueTypes["CityWhereInput"],	orderBy?:ValueTypes["CityOrderByInput"],	skip?:number,	after?:string,	before?:string,	first?:number,	last?:number},ValueTypes["City"]],
jobs?: [{	where?:ValueTypes["JobWhereInput"],	orderBy?:ValueTypes["JobOrderByInput"],	skip?:number,	after?:string,	before?:string,	first?:number,	last?:number},ValueTypes["Job"]],
	createdAt?:true,
	updatedAt?:true,
		__typename?: true
}>;
	["CountryOrderByInput"]:CountryOrderByInput;
	["RemoteOrderByInput"]:RemoteOrderByInput;
	["Remote"]: AliasType<{
	id?:true,
	name?:true,
	slug?:true,
	type?:true,
jobs?: [{	where?:ValueTypes["JobWhereInput"],	orderBy?:ValueTypes["JobOrderByInput"],	skip?:number,	after?:string,	before?:string,	first?:number,	last?:number},ValueTypes["Job"]],
	createdAt?:true,
	updatedAt?:true,
		__typename?: true
}>;
	["Company"]: AliasType<{
	id?:true,
	name?:true,
	slug?:true,
	websiteUrl?:true,
	logoUrl?:true,
jobs?: [{	where?:ValueTypes["JobWhereInput"],	orderBy?:ValueTypes["JobOrderByInput"],	skip?:number,	after?:string,	before?:string,	first?:number,	last?:number},ValueTypes["Job"]],
	twitter?:true,
	emailed?:true,
	createdAt?:true,
	updatedAt?:true,
		__typename?: true
}>;
	["TagOrderByInput"]:TagOrderByInput;
	["Tag"]: AliasType<{
	id?:true,
	name?:true,
	slug?:true,
jobs?: [{	where?:ValueTypes["JobWhereInput"],	orderBy?:ValueTypes["JobOrderByInput"],	skip?:number,	after?:string,	before?:string,	first?:number,	last?:number},ValueTypes["Job"]],
	createdAt?:true,
	updatedAt?:true,
		__typename?: true
}>;
	["JobInput"]: {
	companySlug:string,
	jobSlug:string
};
	["LocationsInput"]: {
	value:string
};
	["Location"]: AliasType<{
	id?:true,
	slug?:true,
	name?:true,
	type?:true,
		__typename?: true
}>;
	["LocationInput"]: {
	slug:string
};
	["Mutation"]: AliasType<{
subscribe?: [{	input:ValueTypes["SubscribeInput"]},ValueTypes["User"]],
postJob?: [{	input:ValueTypes["PostJobInput"]},ValueTypes["Job"]],
updateJob?: [{	input:ValueTypes["UpdateJobInput"],	adminSecret:string},ValueTypes["Job"]],
updateCompany?: [{	input:ValueTypes["UpdateCompanyInput"],	adminSecret:string},ValueTypes["Company"]],
		__typename?: true
}>;
	["SubscribeInput"]: {
	name:string,
	email:string
};
	["User"]: AliasType<{
	id?:true,
	name?:true,
	email?:true,
	subscribe?:true,
	createdAt?:true,
	updatedAt?:true,
		__typename?: true
}>;
	["PostJobInput"]: {
	title:string,
	commitmentId:string,
	companyName:string,
	locationNames:string,
	userEmail:string,
	description:string,
	applyUrl:string
};
	["UpdateJobInput"]: {
	id:string,
	description:string
};
	["UpdateCompanyInput"]: {
	id:string,
	logoUrl:string
}
  }

export type ModelTypes = {
    ["Query"]: {
		jobs:ModelTypes["Job"][],
	job:ModelTypes["Job"],
	locations:ModelTypes["Location"][],
	city:ModelTypes["City"],
	country:ModelTypes["Country"],
	remote:ModelTypes["Remote"],
	commitments:ModelTypes["Commitment"][],
	cities:ModelTypes["City"][],
	countries:ModelTypes["Country"][],
	remotes:ModelTypes["Remote"][],
	companies:ModelTypes["Company"][]
};
	["JobsInput"]: GraphQLTypes["JobsInput"];
	["Job"]: {
		id:string,
	title:string,
	slug:string,
	commitment:ModelTypes["Commitment"],
	cities?:ModelTypes["City"][],
	countries?:ModelTypes["Country"][],
	remotes?:ModelTypes["Remote"][],
	description?:string,
	applyUrl?:string,
	company?:ModelTypes["Company"],
	tags?:ModelTypes["Tag"][],
	isPublished?:boolean,
	isFeatured?:boolean,
	locationNames?:string,
	userEmail?:string,
	postedAt:ModelTypes["DateTime"],
	createdAt:ModelTypes["DateTime"],
	updatedAt:ModelTypes["DateTime"]
};
	["Commitment"]: {
		id:string,
	title:string,
	slug:string,
	jobs?:ModelTypes["Job"][],
	createdAt:ModelTypes["DateTime"],
	updatedAt:ModelTypes["DateTime"]
};
	["JobWhereInput"]: GraphQLTypes["JobWhereInput"];
	["CommitmentWhereInput"]: GraphQLTypes["CommitmentWhereInput"];
	["DateTime"]:any;
	["CityWhereInput"]: GraphQLTypes["CityWhereInput"];
	["CountryWhereInput"]: GraphQLTypes["CountryWhereInput"];
	["RemoteWhereInput"]: GraphQLTypes["RemoteWhereInput"];
	["CompanyWhereInput"]: GraphQLTypes["CompanyWhereInput"];
	["TagWhereInput"]: GraphQLTypes["TagWhereInput"];
	["JobOrderByInput"]: GraphQLTypes["JobOrderByInput"];
	["CityOrderByInput"]: GraphQLTypes["CityOrderByInput"];
	["City"]: {
		id:string,
	name:string,
	slug:string,
	country:ModelTypes["Country"],
	type:string,
	jobs?:ModelTypes["Job"][],
	createdAt:ModelTypes["DateTime"],
	updatedAt:ModelTypes["DateTime"]
};
	["Country"]: {
		id:string,
	name:string,
	slug:string,
	type:string,
	isoCode?:string,
	cities?:ModelTypes["City"][],
	jobs?:ModelTypes["Job"][],
	createdAt:ModelTypes["DateTime"],
	updatedAt:ModelTypes["DateTime"]
};
	["CountryOrderByInput"]: GraphQLTypes["CountryOrderByInput"];
	["RemoteOrderByInput"]: GraphQLTypes["RemoteOrderByInput"];
	["Remote"]: {
		id:string,
	name:string,
	slug:string,
	type:string,
	jobs?:ModelTypes["Job"][],
	createdAt:ModelTypes["DateTime"],
	updatedAt:ModelTypes["DateTime"]
};
	["Company"]: {
		id:string,
	name:string,
	slug:string,
	websiteUrl:string,
	logoUrl?:string,
	jobs?:ModelTypes["Job"][],
	twitter?:string,
	emailed?:boolean,
	createdAt:ModelTypes["DateTime"],
	updatedAt:ModelTypes["DateTime"]
};
	["TagOrderByInput"]: GraphQLTypes["TagOrderByInput"];
	["Tag"]: {
		id:string,
	name:string,
	slug:string,
	jobs?:ModelTypes["Job"][],
	createdAt:ModelTypes["DateTime"],
	updatedAt:ModelTypes["DateTime"]
};
	["JobInput"]: GraphQLTypes["JobInput"];
	["LocationsInput"]: GraphQLTypes["LocationsInput"];
	["Location"]: {
		id:string,
	slug:string,
	name:string,
	type:string
};
	["LocationInput"]: GraphQLTypes["LocationInput"];
	["Mutation"]: {
		subscribe:ModelTypes["User"],
	postJob:ModelTypes["Job"],
	updateJob:ModelTypes["Job"],
	updateCompany:ModelTypes["Company"]
};
	["SubscribeInput"]: GraphQLTypes["SubscribeInput"];
	["User"]: {
		id:string,
	name?:string,
	email:string,
	subscribe:boolean,
	createdAt:ModelTypes["DateTime"],
	updatedAt:ModelTypes["DateTime"]
};
	["PostJobInput"]: GraphQLTypes["PostJobInput"];
	["UpdateJobInput"]: GraphQLTypes["UpdateJobInput"];
	["UpdateCompanyInput"]: GraphQLTypes["UpdateCompanyInput"]
    }

export type GraphQLTypes = {
    ["Query"]: {
	__typename: "Query",
	jobs: Array<GraphQLTypes["Job"]>,
	job: GraphQLTypes["Job"],
	locations: Array<GraphQLTypes["Location"]>,
	city: GraphQLTypes["City"],
	country: GraphQLTypes["Country"],
	remote: GraphQLTypes["Remote"],
	commitments: Array<GraphQLTypes["Commitment"]>,
	cities: Array<GraphQLTypes["City"]>,
	countries: Array<GraphQLTypes["Country"]>,
	remotes: Array<GraphQLTypes["Remote"]>,
	companies: Array<GraphQLTypes["Company"]>
};
	["JobsInput"]: {
		type?: string,
	slug?: string
};
	["Job"]: {
	__typename: "Job",
	id: string,
	title: string,
	slug: string,
	commitment: GraphQLTypes["Commitment"],
	cities?: Array<GraphQLTypes["City"]>,
	countries?: Array<GraphQLTypes["Country"]>,
	remotes?: Array<GraphQLTypes["Remote"]>,
	description?: string,
	applyUrl?: string,
	company?: GraphQLTypes["Company"],
	tags?: Array<GraphQLTypes["Tag"]>,
	isPublished?: boolean,
	isFeatured?: boolean,
	locationNames?: string,
	userEmail?: string,
	postedAt: GraphQLTypes["DateTime"],
	createdAt: GraphQLTypes["DateTime"],
	updatedAt: GraphQLTypes["DateTime"]
};
	["Commitment"]: {
	__typename: "Commitment",
	id: string,
	title: string,
	slug: string,
	jobs?: Array<GraphQLTypes["Job"]>,
	createdAt: GraphQLTypes["DateTime"],
	updatedAt: GraphQLTypes["DateTime"]
};
	["JobWhereInput"]: {
		id?: string,
	id_not?: string,
	id_in?: Array<string>,
	id_not_in?: Array<string>,
	id_lt?: string,
	id_lte?: string,
	id_gt?: string,
	id_gte?: string,
	id_contains?: string,
	id_not_contains?: string,
	id_starts_with?: string,
	id_not_starts_with?: string,
	id_ends_with?: string,
	id_not_ends_with?: string,
	title?: string,
	title_not?: string,
	title_in?: Array<string>,
	title_not_in?: Array<string>,
	title_lt?: string,
	title_lte?: string,
	title_gt?: string,
	title_gte?: string,
	title_contains?: string,
	title_not_contains?: string,
	title_starts_with?: string,
	title_not_starts_with?: string,
	title_ends_with?: string,
	title_not_ends_with?: string,
	slug?: string,
	slug_not?: string,
	slug_in?: Array<string>,
	slug_not_in?: Array<string>,
	slug_lt?: string,
	slug_lte?: string,
	slug_gt?: string,
	slug_gte?: string,
	slug_contains?: string,
	slug_not_contains?: string,
	slug_starts_with?: string,
	slug_not_starts_with?: string,
	slug_ends_with?: string,
	slug_not_ends_with?: string,
	commitment?: GraphQLTypes["CommitmentWhereInput"],
	cities_every?: GraphQLTypes["CityWhereInput"],
	cities_some?: GraphQLTypes["CityWhereInput"],
	cities_none?: GraphQLTypes["CityWhereInput"],
	countries_every?: GraphQLTypes["CountryWhereInput"],
	countries_some?: GraphQLTypes["CountryWhereInput"],
	countries_none?: GraphQLTypes["CountryWhereInput"],
	remotes_every?: GraphQLTypes["RemoteWhereInput"],
	remotes_some?: GraphQLTypes["RemoteWhereInput"],
	remotes_none?: GraphQLTypes["RemoteWhereInput"],
	description?: string,
	description_not?: string,
	description_in?: Array<string>,
	description_not_in?: Array<string>,
	description_lt?: string,
	description_lte?: string,
	description_gt?: string,
	description_gte?: string,
	description_contains?: string,
	description_not_contains?: string,
	description_starts_with?: string,
	description_not_starts_with?: string,
	description_ends_with?: string,
	description_not_ends_with?: string,
	applyUrl?: string,
	applyUrl_not?: string,
	applyUrl_in?: Array<string>,
	applyUrl_not_in?: Array<string>,
	applyUrl_lt?: string,
	applyUrl_lte?: string,
	applyUrl_gt?: string,
	applyUrl_gte?: string,
	applyUrl_contains?: string,
	applyUrl_not_contains?: string,
	applyUrl_starts_with?: string,
	applyUrl_not_starts_with?: string,
	applyUrl_ends_with?: string,
	applyUrl_not_ends_with?: string,
	company?: GraphQLTypes["CompanyWhereInput"],
	tags_every?: GraphQLTypes["TagWhereInput"],
	tags_some?: GraphQLTypes["TagWhereInput"],
	tags_none?: GraphQLTypes["TagWhereInput"],
	isPublished?: boolean,
	isPublished_not?: boolean,
	isFeatured?: boolean,
	isFeatured_not?: boolean,
	locationNames?: string,
	locationNames_not?: string,
	locationNames_in?: Array<string>,
	locationNames_not_in?: Array<string>,
	locationNames_lt?: string,
	locationNames_lte?: string,
	locationNames_gt?: string,
	locationNames_gte?: string,
	locationNames_contains?: string,
	locationNames_not_contains?: string,
	locationNames_starts_with?: string,
	locationNames_not_starts_with?: string,
	locationNames_ends_with?: string,
	locationNames_not_ends_with?: string,
	userEmail?: string,
	userEmail_not?: string,
	userEmail_in?: Array<string>,
	userEmail_not_in?: Array<string>,
	userEmail_lt?: string,
	userEmail_lte?: string,
	userEmail_gt?: string,
	userEmail_gte?: string,
	userEmail_contains?: string,
	userEmail_not_contains?: string,
	userEmail_starts_with?: string,
	userEmail_not_starts_with?: string,
	userEmail_ends_with?: string,
	userEmail_not_ends_with?: string,
	postedAt?: GraphQLTypes["DateTime"],
	postedAt_not?: GraphQLTypes["DateTime"],
	postedAt_in?: Array<GraphQLTypes["DateTime"]>,
	postedAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	postedAt_lt?: GraphQLTypes["DateTime"],
	postedAt_lte?: GraphQLTypes["DateTime"],
	postedAt_gt?: GraphQLTypes["DateTime"],
	postedAt_gte?: GraphQLTypes["DateTime"],
	createdAt?: GraphQLTypes["DateTime"],
	createdAt_not?: GraphQLTypes["DateTime"],
	createdAt_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_lt?: GraphQLTypes["DateTime"],
	createdAt_lte?: GraphQLTypes["DateTime"],
	createdAt_gt?: GraphQLTypes["DateTime"],
	createdAt_gte?: GraphQLTypes["DateTime"],
	updatedAt?: GraphQLTypes["DateTime"],
	updatedAt_not?: GraphQLTypes["DateTime"],
	updatedAt_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_lt?: GraphQLTypes["DateTime"],
	updatedAt_lte?: GraphQLTypes["DateTime"],
	updatedAt_gt?: GraphQLTypes["DateTime"],
	updatedAt_gte?: GraphQLTypes["DateTime"],
	AND?: Array<GraphQLTypes["JobWhereInput"]>,
	OR?: Array<GraphQLTypes["JobWhereInput"]>,
	NOT?: Array<GraphQLTypes["JobWhereInput"]>
};
	["CommitmentWhereInput"]: {
		id?: string,
	id_not?: string,
	id_in?: Array<string>,
	id_not_in?: Array<string>,
	id_lt?: string,
	id_lte?: string,
	id_gt?: string,
	id_gte?: string,
	id_contains?: string,
	id_not_contains?: string,
	id_starts_with?: string,
	id_not_starts_with?: string,
	id_ends_with?: string,
	id_not_ends_with?: string,
	title?: string,
	title_not?: string,
	title_in?: Array<string>,
	title_not_in?: Array<string>,
	title_lt?: string,
	title_lte?: string,
	title_gt?: string,
	title_gte?: string,
	title_contains?: string,
	title_not_contains?: string,
	title_starts_with?: string,
	title_not_starts_with?: string,
	title_ends_with?: string,
	title_not_ends_with?: string,
	slug?: string,
	slug_not?: string,
	slug_in?: Array<string>,
	slug_not_in?: Array<string>,
	slug_lt?: string,
	slug_lte?: string,
	slug_gt?: string,
	slug_gte?: string,
	slug_contains?: string,
	slug_not_contains?: string,
	slug_starts_with?: string,
	slug_not_starts_with?: string,
	slug_ends_with?: string,
	slug_not_ends_with?: string,
	jobs_every?: GraphQLTypes["JobWhereInput"],
	jobs_some?: GraphQLTypes["JobWhereInput"],
	jobs_none?: GraphQLTypes["JobWhereInput"],
	createdAt?: GraphQLTypes["DateTime"],
	createdAt_not?: GraphQLTypes["DateTime"],
	createdAt_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_lt?: GraphQLTypes["DateTime"],
	createdAt_lte?: GraphQLTypes["DateTime"],
	createdAt_gt?: GraphQLTypes["DateTime"],
	createdAt_gte?: GraphQLTypes["DateTime"],
	updatedAt?: GraphQLTypes["DateTime"],
	updatedAt_not?: GraphQLTypes["DateTime"],
	updatedAt_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_lt?: GraphQLTypes["DateTime"],
	updatedAt_lte?: GraphQLTypes["DateTime"],
	updatedAt_gt?: GraphQLTypes["DateTime"],
	updatedAt_gte?: GraphQLTypes["DateTime"],
	AND?: Array<GraphQLTypes["CommitmentWhereInput"]>,
	OR?: Array<GraphQLTypes["CommitmentWhereInput"]>,
	NOT?: Array<GraphQLTypes["CommitmentWhereInput"]>
};
	["DateTime"]:any;
	["CityWhereInput"]: {
		id?: string,
	id_not?: string,
	id_in?: Array<string>,
	id_not_in?: Array<string>,
	id_lt?: string,
	id_lte?: string,
	id_gt?: string,
	id_gte?: string,
	id_contains?: string,
	id_not_contains?: string,
	id_starts_with?: string,
	id_not_starts_with?: string,
	id_ends_with?: string,
	id_not_ends_with?: string,
	name?: string,
	name_not?: string,
	name_in?: Array<string>,
	name_not_in?: Array<string>,
	name_lt?: string,
	name_lte?: string,
	name_gt?: string,
	name_gte?: string,
	name_contains?: string,
	name_not_contains?: string,
	name_starts_with?: string,
	name_not_starts_with?: string,
	name_ends_with?: string,
	name_not_ends_with?: string,
	slug?: string,
	slug_not?: string,
	slug_in?: Array<string>,
	slug_not_in?: Array<string>,
	slug_lt?: string,
	slug_lte?: string,
	slug_gt?: string,
	slug_gte?: string,
	slug_contains?: string,
	slug_not_contains?: string,
	slug_starts_with?: string,
	slug_not_starts_with?: string,
	slug_ends_with?: string,
	slug_not_ends_with?: string,
	country?: GraphQLTypes["CountryWhereInput"],
	type?: string,
	type_not?: string,
	type_in?: Array<string>,
	type_not_in?: Array<string>,
	type_lt?: string,
	type_lte?: string,
	type_gt?: string,
	type_gte?: string,
	type_contains?: string,
	type_not_contains?: string,
	type_starts_with?: string,
	type_not_starts_with?: string,
	type_ends_with?: string,
	type_not_ends_with?: string,
	jobs_every?: GraphQLTypes["JobWhereInput"],
	jobs_some?: GraphQLTypes["JobWhereInput"],
	jobs_none?: GraphQLTypes["JobWhereInput"],
	createdAt?: GraphQLTypes["DateTime"],
	createdAt_not?: GraphQLTypes["DateTime"],
	createdAt_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_lt?: GraphQLTypes["DateTime"],
	createdAt_lte?: GraphQLTypes["DateTime"],
	createdAt_gt?: GraphQLTypes["DateTime"],
	createdAt_gte?: GraphQLTypes["DateTime"],
	updatedAt?: GraphQLTypes["DateTime"],
	updatedAt_not?: GraphQLTypes["DateTime"],
	updatedAt_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_lt?: GraphQLTypes["DateTime"],
	updatedAt_lte?: GraphQLTypes["DateTime"],
	updatedAt_gt?: GraphQLTypes["DateTime"],
	updatedAt_gte?: GraphQLTypes["DateTime"],
	AND?: Array<GraphQLTypes["CityWhereInput"]>,
	OR?: Array<GraphQLTypes["CityWhereInput"]>,
	NOT?: Array<GraphQLTypes["CityWhereInput"]>
};
	["CountryWhereInput"]: {
		id?: string,
	id_not?: string,
	id_in?: Array<string>,
	id_not_in?: Array<string>,
	id_lt?: string,
	id_lte?: string,
	id_gt?: string,
	id_gte?: string,
	id_contains?: string,
	id_not_contains?: string,
	id_starts_with?: string,
	id_not_starts_with?: string,
	id_ends_with?: string,
	id_not_ends_with?: string,
	name?: string,
	name_not?: string,
	name_in?: Array<string>,
	name_not_in?: Array<string>,
	name_lt?: string,
	name_lte?: string,
	name_gt?: string,
	name_gte?: string,
	name_contains?: string,
	name_not_contains?: string,
	name_starts_with?: string,
	name_not_starts_with?: string,
	name_ends_with?: string,
	name_not_ends_with?: string,
	slug?: string,
	slug_not?: string,
	slug_in?: Array<string>,
	slug_not_in?: Array<string>,
	slug_lt?: string,
	slug_lte?: string,
	slug_gt?: string,
	slug_gte?: string,
	slug_contains?: string,
	slug_not_contains?: string,
	slug_starts_with?: string,
	slug_not_starts_with?: string,
	slug_ends_with?: string,
	slug_not_ends_with?: string,
	type?: string,
	type_not?: string,
	type_in?: Array<string>,
	type_not_in?: Array<string>,
	type_lt?: string,
	type_lte?: string,
	type_gt?: string,
	type_gte?: string,
	type_contains?: string,
	type_not_contains?: string,
	type_starts_with?: string,
	type_not_starts_with?: string,
	type_ends_with?: string,
	type_not_ends_with?: string,
	isoCode?: string,
	isoCode_not?: string,
	isoCode_in?: Array<string>,
	isoCode_not_in?: Array<string>,
	isoCode_lt?: string,
	isoCode_lte?: string,
	isoCode_gt?: string,
	isoCode_gte?: string,
	isoCode_contains?: string,
	isoCode_not_contains?: string,
	isoCode_starts_with?: string,
	isoCode_not_starts_with?: string,
	isoCode_ends_with?: string,
	isoCode_not_ends_with?: string,
	cities_every?: GraphQLTypes["CityWhereInput"],
	cities_some?: GraphQLTypes["CityWhereInput"],
	cities_none?: GraphQLTypes["CityWhereInput"],
	jobs_every?: GraphQLTypes["JobWhereInput"],
	jobs_some?: GraphQLTypes["JobWhereInput"],
	jobs_none?: GraphQLTypes["JobWhereInput"],
	createdAt?: GraphQLTypes["DateTime"],
	createdAt_not?: GraphQLTypes["DateTime"],
	createdAt_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_lt?: GraphQLTypes["DateTime"],
	createdAt_lte?: GraphQLTypes["DateTime"],
	createdAt_gt?: GraphQLTypes["DateTime"],
	createdAt_gte?: GraphQLTypes["DateTime"],
	updatedAt?: GraphQLTypes["DateTime"],
	updatedAt_not?: GraphQLTypes["DateTime"],
	updatedAt_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_lt?: GraphQLTypes["DateTime"],
	updatedAt_lte?: GraphQLTypes["DateTime"],
	updatedAt_gt?: GraphQLTypes["DateTime"],
	updatedAt_gte?: GraphQLTypes["DateTime"],
	AND?: Array<GraphQLTypes["CountryWhereInput"]>,
	OR?: Array<GraphQLTypes["CountryWhereInput"]>,
	NOT?: Array<GraphQLTypes["CountryWhereInput"]>
};
	["RemoteWhereInput"]: {
		id?: string,
	id_not?: string,
	id_in?: Array<string>,
	id_not_in?: Array<string>,
	id_lt?: string,
	id_lte?: string,
	id_gt?: string,
	id_gte?: string,
	id_contains?: string,
	id_not_contains?: string,
	id_starts_with?: string,
	id_not_starts_with?: string,
	id_ends_with?: string,
	id_not_ends_with?: string,
	name?: string,
	name_not?: string,
	name_in?: Array<string>,
	name_not_in?: Array<string>,
	name_lt?: string,
	name_lte?: string,
	name_gt?: string,
	name_gte?: string,
	name_contains?: string,
	name_not_contains?: string,
	name_starts_with?: string,
	name_not_starts_with?: string,
	name_ends_with?: string,
	name_not_ends_with?: string,
	slug?: string,
	slug_not?: string,
	slug_in?: Array<string>,
	slug_not_in?: Array<string>,
	slug_lt?: string,
	slug_lte?: string,
	slug_gt?: string,
	slug_gte?: string,
	slug_contains?: string,
	slug_not_contains?: string,
	slug_starts_with?: string,
	slug_not_starts_with?: string,
	slug_ends_with?: string,
	slug_not_ends_with?: string,
	type?: string,
	type_not?: string,
	type_in?: Array<string>,
	type_not_in?: Array<string>,
	type_lt?: string,
	type_lte?: string,
	type_gt?: string,
	type_gte?: string,
	type_contains?: string,
	type_not_contains?: string,
	type_starts_with?: string,
	type_not_starts_with?: string,
	type_ends_with?: string,
	type_not_ends_with?: string,
	jobs_every?: GraphQLTypes["JobWhereInput"],
	jobs_some?: GraphQLTypes["JobWhereInput"],
	jobs_none?: GraphQLTypes["JobWhereInput"],
	createdAt?: GraphQLTypes["DateTime"],
	createdAt_not?: GraphQLTypes["DateTime"],
	createdAt_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_lt?: GraphQLTypes["DateTime"],
	createdAt_lte?: GraphQLTypes["DateTime"],
	createdAt_gt?: GraphQLTypes["DateTime"],
	createdAt_gte?: GraphQLTypes["DateTime"],
	updatedAt?: GraphQLTypes["DateTime"],
	updatedAt_not?: GraphQLTypes["DateTime"],
	updatedAt_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_lt?: GraphQLTypes["DateTime"],
	updatedAt_lte?: GraphQLTypes["DateTime"],
	updatedAt_gt?: GraphQLTypes["DateTime"],
	updatedAt_gte?: GraphQLTypes["DateTime"],
	AND?: Array<GraphQLTypes["RemoteWhereInput"]>,
	OR?: Array<GraphQLTypes["RemoteWhereInput"]>,
	NOT?: Array<GraphQLTypes["RemoteWhereInput"]>
};
	["CompanyWhereInput"]: {
		id?: string,
	id_not?: string,
	id_in?: Array<string>,
	id_not_in?: Array<string>,
	id_lt?: string,
	id_lte?: string,
	id_gt?: string,
	id_gte?: string,
	id_contains?: string,
	id_not_contains?: string,
	id_starts_with?: string,
	id_not_starts_with?: string,
	id_ends_with?: string,
	id_not_ends_with?: string,
	name?: string,
	name_not?: string,
	name_in?: Array<string>,
	name_not_in?: Array<string>,
	name_lt?: string,
	name_lte?: string,
	name_gt?: string,
	name_gte?: string,
	name_contains?: string,
	name_not_contains?: string,
	name_starts_with?: string,
	name_not_starts_with?: string,
	name_ends_with?: string,
	name_not_ends_with?: string,
	slug?: string,
	slug_not?: string,
	slug_in?: Array<string>,
	slug_not_in?: Array<string>,
	slug_lt?: string,
	slug_lte?: string,
	slug_gt?: string,
	slug_gte?: string,
	slug_contains?: string,
	slug_not_contains?: string,
	slug_starts_with?: string,
	slug_not_starts_with?: string,
	slug_ends_with?: string,
	slug_not_ends_with?: string,
	websiteUrl?: string,
	websiteUrl_not?: string,
	websiteUrl_in?: Array<string>,
	websiteUrl_not_in?: Array<string>,
	websiteUrl_lt?: string,
	websiteUrl_lte?: string,
	websiteUrl_gt?: string,
	websiteUrl_gte?: string,
	websiteUrl_contains?: string,
	websiteUrl_not_contains?: string,
	websiteUrl_starts_with?: string,
	websiteUrl_not_starts_with?: string,
	websiteUrl_ends_with?: string,
	websiteUrl_not_ends_with?: string,
	logoUrl?: string,
	logoUrl_not?: string,
	logoUrl_in?: Array<string>,
	logoUrl_not_in?: Array<string>,
	logoUrl_lt?: string,
	logoUrl_lte?: string,
	logoUrl_gt?: string,
	logoUrl_gte?: string,
	logoUrl_contains?: string,
	logoUrl_not_contains?: string,
	logoUrl_starts_with?: string,
	logoUrl_not_starts_with?: string,
	logoUrl_ends_with?: string,
	logoUrl_not_ends_with?: string,
	jobs_every?: GraphQLTypes["JobWhereInput"],
	jobs_some?: GraphQLTypes["JobWhereInput"],
	jobs_none?: GraphQLTypes["JobWhereInput"],
	twitter?: string,
	twitter_not?: string,
	twitter_in?: Array<string>,
	twitter_not_in?: Array<string>,
	twitter_lt?: string,
	twitter_lte?: string,
	twitter_gt?: string,
	twitter_gte?: string,
	twitter_contains?: string,
	twitter_not_contains?: string,
	twitter_starts_with?: string,
	twitter_not_starts_with?: string,
	twitter_ends_with?: string,
	twitter_not_ends_with?: string,
	emailed?: boolean,
	emailed_not?: boolean,
	createdAt?: GraphQLTypes["DateTime"],
	createdAt_not?: GraphQLTypes["DateTime"],
	createdAt_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_lt?: GraphQLTypes["DateTime"],
	createdAt_lte?: GraphQLTypes["DateTime"],
	createdAt_gt?: GraphQLTypes["DateTime"],
	createdAt_gte?: GraphQLTypes["DateTime"],
	updatedAt?: GraphQLTypes["DateTime"],
	updatedAt_not?: GraphQLTypes["DateTime"],
	updatedAt_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_lt?: GraphQLTypes["DateTime"],
	updatedAt_lte?: GraphQLTypes["DateTime"],
	updatedAt_gt?: GraphQLTypes["DateTime"],
	updatedAt_gte?: GraphQLTypes["DateTime"],
	AND?: Array<GraphQLTypes["CompanyWhereInput"]>,
	OR?: Array<GraphQLTypes["CompanyWhereInput"]>,
	NOT?: Array<GraphQLTypes["CompanyWhereInput"]>
};
	["TagWhereInput"]: {
		id?: string,
	id_not?: string,
	id_in?: Array<string>,
	id_not_in?: Array<string>,
	id_lt?: string,
	id_lte?: string,
	id_gt?: string,
	id_gte?: string,
	id_contains?: string,
	id_not_contains?: string,
	id_starts_with?: string,
	id_not_starts_with?: string,
	id_ends_with?: string,
	id_not_ends_with?: string,
	name?: string,
	name_not?: string,
	name_in?: Array<string>,
	name_not_in?: Array<string>,
	name_lt?: string,
	name_lte?: string,
	name_gt?: string,
	name_gte?: string,
	name_contains?: string,
	name_not_contains?: string,
	name_starts_with?: string,
	name_not_starts_with?: string,
	name_ends_with?: string,
	name_not_ends_with?: string,
	slug?: string,
	slug_not?: string,
	slug_in?: Array<string>,
	slug_not_in?: Array<string>,
	slug_lt?: string,
	slug_lte?: string,
	slug_gt?: string,
	slug_gte?: string,
	slug_contains?: string,
	slug_not_contains?: string,
	slug_starts_with?: string,
	slug_not_starts_with?: string,
	slug_ends_with?: string,
	slug_not_ends_with?: string,
	jobs_every?: GraphQLTypes["JobWhereInput"],
	jobs_some?: GraphQLTypes["JobWhereInput"],
	jobs_none?: GraphQLTypes["JobWhereInput"],
	createdAt?: GraphQLTypes["DateTime"],
	createdAt_not?: GraphQLTypes["DateTime"],
	createdAt_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	createdAt_lt?: GraphQLTypes["DateTime"],
	createdAt_lte?: GraphQLTypes["DateTime"],
	createdAt_gt?: GraphQLTypes["DateTime"],
	createdAt_gte?: GraphQLTypes["DateTime"],
	updatedAt?: GraphQLTypes["DateTime"],
	updatedAt_not?: GraphQLTypes["DateTime"],
	updatedAt_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_not_in?: Array<GraphQLTypes["DateTime"]>,
	updatedAt_lt?: GraphQLTypes["DateTime"],
	updatedAt_lte?: GraphQLTypes["DateTime"],
	updatedAt_gt?: GraphQLTypes["DateTime"],
	updatedAt_gte?: GraphQLTypes["DateTime"],
	AND?: Array<GraphQLTypes["TagWhereInput"]>,
	OR?: Array<GraphQLTypes["TagWhereInput"]>,
	NOT?: Array<GraphQLTypes["TagWhereInput"]>
};
	["JobOrderByInput"]: JobOrderByInput;
	["CityOrderByInput"]: CityOrderByInput;
	["City"]: {
	__typename: "City",
	id: string,
	name: string,
	slug: string,
	country: GraphQLTypes["Country"],
	type: string,
	jobs?: Array<GraphQLTypes["Job"]>,
	createdAt: GraphQLTypes["DateTime"],
	updatedAt: GraphQLTypes["DateTime"]
};
	["Country"]: {
	__typename: "Country",
	id: string,
	name: string,
	slug: string,
	type: string,
	isoCode?: string,
	cities?: Array<GraphQLTypes["City"]>,
	jobs?: Array<GraphQLTypes["Job"]>,
	createdAt: GraphQLTypes["DateTime"],
	updatedAt: GraphQLTypes["DateTime"]
};
	["CountryOrderByInput"]: CountryOrderByInput;
	["RemoteOrderByInput"]: RemoteOrderByInput;
	["Remote"]: {
	__typename: "Remote",
	id: string,
	name: string,
	slug: string,
	type: string,
	jobs?: Array<GraphQLTypes["Job"]>,
	createdAt: GraphQLTypes["DateTime"],
	updatedAt: GraphQLTypes["DateTime"]
};
	["Company"]: {
	__typename: "Company",
	id: string,
	name: string,
	slug: string,
	websiteUrl: string,
	logoUrl?: string,
	jobs?: Array<GraphQLTypes["Job"]>,
	twitter?: string,
	emailed?: boolean,
	createdAt: GraphQLTypes["DateTime"],
	updatedAt: GraphQLTypes["DateTime"]
};
	["TagOrderByInput"]: TagOrderByInput;
	["Tag"]: {
	__typename: "Tag",
	id: string,
	name: string,
	slug: string,
	jobs?: Array<GraphQLTypes["Job"]>,
	createdAt: GraphQLTypes["DateTime"],
	updatedAt: GraphQLTypes["DateTime"]
};
	["JobInput"]: {
		companySlug: string,
	jobSlug: string
};
	["LocationsInput"]: {
		value: string
};
	["Location"]: {
	__typename: "Location",
	id: string,
	slug: string,
	name: string,
	type: string
};
	["LocationInput"]: {
		slug: string
};
	["Mutation"]: {
	__typename: "Mutation",
	subscribe: GraphQLTypes["User"],
	postJob: GraphQLTypes["Job"],
	updateJob: GraphQLTypes["Job"],
	updateCompany: GraphQLTypes["Company"]
};
	["SubscribeInput"]: {
		name: string,
	email: string
};
	["User"]: {
	__typename: "User",
	id: string,
	name?: string,
	email: string,
	subscribe: boolean,
	createdAt: GraphQLTypes["DateTime"],
	updatedAt: GraphQLTypes["DateTime"]
};
	["PostJobInput"]: {
		title: string,
	commitmentId: string,
	companyName: string,
	locationNames: string,
	userEmail: string,
	description: string,
	applyUrl: string
};
	["UpdateJobInput"]: {
		id: string,
	description: string
};
	["UpdateCompanyInput"]: {
		id: string,
	logoUrl: string
}
    }
export enum JobOrderByInput {
	id_ASC = "id_ASC",
	id_DESC = "id_DESC",
	title_ASC = "title_ASC",
	title_DESC = "title_DESC",
	slug_ASC = "slug_ASC",
	slug_DESC = "slug_DESC",
	description_ASC = "description_ASC",
	description_DESC = "description_DESC",
	applyUrl_ASC = "applyUrl_ASC",
	applyUrl_DESC = "applyUrl_DESC",
	isPublished_ASC = "isPublished_ASC",
	isPublished_DESC = "isPublished_DESC",
	isFeatured_ASC = "isFeatured_ASC",
	isFeatured_DESC = "isFeatured_DESC",
	locationNames_ASC = "locationNames_ASC",
	locationNames_DESC = "locationNames_DESC",
	userEmail_ASC = "userEmail_ASC",
	userEmail_DESC = "userEmail_DESC",
	postedAt_ASC = "postedAt_ASC",
	postedAt_DESC = "postedAt_DESC",
	createdAt_ASC = "createdAt_ASC",
	createdAt_DESC = "createdAt_DESC",
	updatedAt_ASC = "updatedAt_ASC",
	updatedAt_DESC = "updatedAt_DESC"
}
export enum CityOrderByInput {
	id_ASC = "id_ASC",
	id_DESC = "id_DESC",
	name_ASC = "name_ASC",
	name_DESC = "name_DESC",
	slug_ASC = "slug_ASC",
	slug_DESC = "slug_DESC",
	type_ASC = "type_ASC",
	type_DESC = "type_DESC",
	createdAt_ASC = "createdAt_ASC",
	createdAt_DESC = "createdAt_DESC",
	updatedAt_ASC = "updatedAt_ASC",
	updatedAt_DESC = "updatedAt_DESC"
}
export enum CountryOrderByInput {
	id_ASC = "id_ASC",
	id_DESC = "id_DESC",
	name_ASC = "name_ASC",
	name_DESC = "name_DESC",
	slug_ASC = "slug_ASC",
	slug_DESC = "slug_DESC",
	type_ASC = "type_ASC",
	type_DESC = "type_DESC",
	isoCode_ASC = "isoCode_ASC",
	isoCode_DESC = "isoCode_DESC",
	createdAt_ASC = "createdAt_ASC",
	createdAt_DESC = "createdAt_DESC",
	updatedAt_ASC = "updatedAt_ASC",
	updatedAt_DESC = "updatedAt_DESC"
}
export enum RemoteOrderByInput {
	id_ASC = "id_ASC",
	id_DESC = "id_DESC",
	name_ASC = "name_ASC",
	name_DESC = "name_DESC",
	slug_ASC = "slug_ASC",
	slug_DESC = "slug_DESC",
	type_ASC = "type_ASC",
	type_DESC = "type_DESC",
	createdAt_ASC = "createdAt_ASC",
	createdAt_DESC = "createdAt_DESC",
	updatedAt_ASC = "updatedAt_ASC",
	updatedAt_DESC = "updatedAt_DESC"
}
export enum TagOrderByInput {
	id_ASC = "id_ASC",
	id_DESC = "id_DESC",
	name_ASC = "name_ASC",
	name_DESC = "name_DESC",
	slug_ASC = "slug_ASC",
	slug_DESC = "slug_DESC",
	createdAt_ASC = "createdAt_ASC",
	createdAt_DESC = "createdAt_DESC",
	updatedAt_ASC = "updatedAt_ASC",
	updatedAt_DESC = "updatedAt_DESC"
}


export type UnwrapPromise<T> = T extends Promise<infer R> ? R : T;
export type ZeusState<T extends (...args: any[]) => Promise<any>> = NonNullable<
  UnwrapPromise<ReturnType<T>>
>;
export type ZeusHook<
  T extends (
    ...args: any[]
  ) => Record<string, (...args: any[]) => Promise<any>>,
  N extends keyof ReturnType<T>
> = ZeusState<ReturnType<T>[N]>;

type WithTypeNameValue<T> = T & {
  __typename?: true;
};
type AliasType<T> = WithTypeNameValue<T> & {
  __alias?: Record<string, WithTypeNameValue<T>>;
};
export interface GraphQLResponse {
  data?: Record<string, any>;
  errors?: Array<{
    message: string;
  }>;
}
type DeepAnify<T> = {
  [P in keyof T]?: any;
};
type IsPayLoad<T> = T extends [any, infer PayLoad] ? PayLoad : T;
type IsArray<T, U> = T extends Array<infer R> ? InputType<R, U>[] : InputType<T, U>;
type FlattenArray<T> = T extends Array<infer R> ? R : T;

type NotUnionTypes<SRC extends DeepAnify<DST>, DST> = {
  [P in keyof DST]: SRC[P] extends '__union' & infer R ? never : P;
}[keyof DST];

type ExtractUnions<SRC extends DeepAnify<DST>, DST> = {
  [P in keyof SRC]: SRC[P] extends '__union' & infer R
    ? P extends keyof DST
      ? IsArray<R, DST[P] & { __typename: true }>
      : {}
    : never;
}[keyof SRC];

type IsInterfaced<SRC extends DeepAnify<DST>, DST> = FlattenArray<SRC> extends ZEUS_INTERFACES | ZEUS_UNIONS
  ? ExtractUnions<SRC, DST> &
      {
        [P in keyof Omit<Pick<SRC, NotUnionTypes<SRC, DST>>, '__typename'>]: DST[P] extends true
          ? SRC[P]
          : IsArray<SRC[P], DST[P]>;
      }
  : {
      [P in keyof Pick<SRC, keyof DST>]: DST[P] extends true ? SRC[P] : IsArray<SRC[P], DST[P]>;
    };



export type MapType<SRC, DST> = SRC extends DeepAnify<DST> ? IsInterfaced<SRC, DST> : never;
type InputType<SRC, DST> = IsPayLoad<DST> extends { __alias: infer R }
  ? {
      [P in keyof R]: MapType<SRC, R[P]>;
    } &
      MapType<SRC, Omit<IsPayLoad<DST>, '__alias'>>
  : MapType<SRC, IsPayLoad<DST>>;
type Func<P extends any[], R> = (...args: P) => R;
type AnyFunc = Func<any, any>;
export type ArgsType<F extends AnyFunc> = F extends Func<infer P, any> ? P : never;
export type OperationToGraphQL<V, T> = <Z extends V>(o: Z | V, variables?: Record<string, any>) => Promise<InputType<T, Z>>;
export type SubscriptionToGraphQL<V, T> = <Z extends V>(
  o: Z | V,
  variables?: Record<string, any>,
) => {
  ws: WebSocket;
  on: (fn: (args: InputType<T, Z>) => void) => void;
  off: (e: { data?: InputType<T, Z>; code?: number; reason?: string; message?: string }) => void;
  error: (e: { data?: InputType<T, Z>; message?: string }) => void;
  open: () => void;
};
export type CastToGraphQL<V, T> = (resultOfYourQuery: any) => <Z extends V>(o: Z | V) => InputType<T, Z>;
export type SelectionFunction<V> = <T>(t: T | V) => T;
export type fetchOptions = ArgsType<typeof fetch>;
type websocketOptions = typeof WebSocket extends new (
  ...args: infer R
) => WebSocket
  ? R
  : never;
export type chainOptions =
  | [fetchOptions[0], fetchOptions[1] & {websocket?: websocketOptions}]
  | [fetchOptions[0]];
export type FetchFunction = (
  query: string,
  variables?: Record<string, any>,
) => Promise<any>;
export type SubscriptionFunction = (
  query: string,
  variables?: Record<string, any>,
) => void;
type NotUndefined<T> = T extends undefined ? never : T;
export type ResolverType<F> = NotUndefined<F extends [infer ARGS, any] ? ARGS : undefined>;

export declare function Thunder(
  fn: FetchFunction,
  subscriptionFn: SubscriptionFunction
):{
  query: OperationToGraphQL<ValueTypes["Query"],GraphQLTypes["Query"]>,mutation: OperationToGraphQL<ValueTypes["Mutation"],GraphQLTypes["Mutation"]>
}

export declare function Chain(
  ...options: chainOptions
):{
  query: OperationToGraphQL<ValueTypes["Query"],GraphQLTypes["Query"]>,mutation: OperationToGraphQL<ValueTypes["Mutation"],GraphQLTypes["Mutation"]>
}

export declare const Zeus: {
  query: (o: ValueTypes["Query"]) => string,mutation: (o: ValueTypes["Mutation"]) => string
}

export declare const Cast: {
  query: CastToGraphQL<
  ValueTypes["Query"],
  GraphQLTypes["Query"]
>,mutation: CastToGraphQL<
  ValueTypes["Mutation"],
  GraphQLTypes["Mutation"]
>
}

export declare const Selectors: {
  query: SelectionFunction<ValueTypes["Query"]>,mutation: SelectionFunction<ValueTypes["Mutation"]>
}

export declare const resolverFor : <
  T extends keyof ValueTypes,
  Z extends keyof ValueTypes[T],
  Y extends (
    args: Required<ValueTypes[T]>[Z] extends [infer Input, any] ? Input : any,
    source: any,
  ) => Z extends keyof ModelTypes[T] ? ModelTypes[T][Z] | Promise<ModelTypes[T][Z]> : any
>(
  type: T,
  field: Z,
  fn: Y,
) => (args?:any, source?:any) => void;

export declare const Gql: ReturnType<typeof Chain>
